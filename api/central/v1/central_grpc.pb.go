// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: central/v1/central.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CentralService_ListVideos_FullMethodName   = "/central.v1.CentralService/ListVideos"
	CentralService_GetVideoInfo_FullMethodName = "/central.v1.CentralService/GetVideoInfo"
)

// CentralServiceClient is the client API for CentralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralServiceClient interface {
	ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosReply, error)
	GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...grpc.CallOption) (*GetVideoInfoReply, error)
}

type centralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralServiceClient(cc grpc.ClientConnInterface) CentralServiceClient {
	return &centralServiceClient{cc}
}

func (c *centralServiceClient) ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVideosReply)
	err := c.cc.Invoke(ctx, CentralService_ListVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralServiceClient) GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...grpc.CallOption) (*GetVideoInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoInfoReply)
	err := c.cc.Invoke(ctx, CentralService_GetVideoInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralServiceServer is the server API for CentralService service.
// All implementations must embed UnimplementedCentralServiceServer
// for forward compatibility.
type CentralServiceServer interface {
	ListVideos(context.Context, *ListVideosRequest) (*ListVideosReply, error)
	GetVideoInfo(context.Context, *GetVideoInfoRequest) (*GetVideoInfoReply, error)
	mustEmbedUnimplementedCentralServiceServer()
}

// UnimplementedCentralServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCentralServiceServer struct{}

func (UnimplementedCentralServiceServer) ListVideos(context.Context, *ListVideosRequest) (*ListVideosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedCentralServiceServer) GetVideoInfo(context.Context, *GetVideoInfoRequest) (*GetVideoInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedCentralServiceServer) mustEmbedUnimplementedCentralServiceServer() {}
func (UnimplementedCentralServiceServer) testEmbeddedByValue()                        {}

// UnsafeCentralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralServiceServer will
// result in compilation errors.
type UnsafeCentralServiceServer interface {
	mustEmbedUnimplementedCentralServiceServer()
}

func RegisterCentralServiceServer(s grpc.ServiceRegistrar, srv CentralServiceServer) {
	// If the following call pancis, it indicates UnimplementedCentralServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CentralService_ServiceDesc, srv)
}

func _CentralService_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentralService_ListVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).ListVideos(ctx, req.(*ListVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralService_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentralService_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).GetVideoInfo(ctx, req.(*GetVideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CentralService_ServiceDesc is the grpc.ServiceDesc for CentralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "central.v1.CentralService",
	HandlerType: (*CentralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVideos",
			Handler:    _CentralService_ListVideos_Handler,
		},
		{
			MethodName: "GetVideoInfo",
			Handler:    _CentralService_GetVideoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "central/v1/central.proto",
}
