// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.29.3
// source: node/v1/node.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNodeServiceGetVideoInfo = "/node.v1.NodeService/GetVideoInfo"
const OperationNodeServiceListVideos = "/node.v1.NodeService/ListVideos"

type NodeServiceHTTPServer interface {
	GetVideoInfo(context.Context, *GetVideoInfoRequest) (*GetVideoInfoReply, error)
	ListVideos(context.Context, *ListVideosRequest) (*ListVideosReply, error)
}

func RegisterNodeServiceHTTPServer(s *http.Server, srv NodeServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/node/v1/videos", _NodeService_ListVideos0_HTTP_Handler(srv))
	r.GET("/node/v1/videos/{id}", _NodeService_GetVideoInfo0_HTTP_Handler(srv))
}

func _NodeService_ListVideos0_HTTP_Handler(srv NodeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListVideosRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeServiceListVideos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListVideos(ctx, req.(*ListVideosRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListVideosReply)
		return ctx.Result(200, reply)
	}
}

func _NodeService_GetVideoInfo0_HTTP_Handler(srv NodeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeServiceGetVideoInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoInfo(ctx, req.(*GetVideoInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVideoInfoReply)
		return ctx.Result(200, reply)
	}
}

type NodeServiceHTTPClient interface {
	GetVideoInfo(ctx context.Context, req *GetVideoInfoRequest, opts ...http.CallOption) (rsp *GetVideoInfoReply, err error)
	ListVideos(ctx context.Context, req *ListVideosRequest, opts ...http.CallOption) (rsp *ListVideosReply, err error)
}

type NodeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNodeServiceHTTPClient(client *http.Client) NodeServiceHTTPClient {
	return &NodeServiceHTTPClientImpl{client}
}

func (c *NodeServiceHTTPClientImpl) GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...http.CallOption) (*GetVideoInfoReply, error) {
	var out GetVideoInfoReply
	pattern := "/node/v1/videos/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeServiceGetVideoInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NodeServiceHTTPClientImpl) ListVideos(ctx context.Context, in *ListVideosRequest, opts ...http.CallOption) (*ListVideosReply, error) {
	var out ListVideosReply
	pattern := "/node/v1/videos"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeServiceListVideos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
